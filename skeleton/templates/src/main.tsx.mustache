import { Auth0Provider } from "@auth0/auth0-react";
import AuthGuard from "@/components/AuthGuard/index.ts";
import FullPageSpinner from "@/components/FullPageSpinner/index.ts";
import MultiProvider from "@/components/MultiProvider/index.ts";
import "@fontsource/roboto/300.css";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";
import { CssBaseline, createTheme } from "@mui/material";
import { ThemeProvider } from "@mui/material/styles";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { SnackbarProvider } from "notistack";
import { StrictMode } from "react";
import { ConfirmProvider } from "react-confirm-hook";
import { createRoot } from "react-dom/client";
import { RouterProvider } from "react-router-dom";
import { router } from "./router.js";

const container = document.getElementById("root");

if (!container) {
    throw new Error("Root element missing");
}

const theme = createTheme();
const queryClient = new QueryClient();
const root = createRoot(container);

root.render(
    <StrictMode>
        <MultiProvider
            providerCreators={[
                (children) => (
                    <ThemeProvider theme={theme}>
                        <CssBaseline />
                        {children}
                    </ThemeProvider>
                ),
                (children) => (
                    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
                ),
{{#if (has features "auth0")}}
                (children) => (
                    <Auth0Provider
                        domain={import.meta.env.VITE_APP_AUTH0_DOMAIN}
                        clientId={import.meta.env.VITE_APP_AUTH0_CLIENT_ID}
                        authorizationParams=\{{
                            redirect_uri: window.location.origin,
                            audience: import.meta.env.VITE_APP_AUTH0_AUDIENCE,
                        }}
                        onRedirectCallback={(appState) => {
                            void router.navigate(appState?.returnTo ?? "/");
                        }}
                        useRefreshTokens
                        cacheLocation="localstorage"
                    >
                        {children}
                    </Auth0Provider>
                ),
                (children) => <AuthGuard>{children}</AuthGuard>,
{{/if}}
                (children) => <SnackbarProvider>{children}</SnackbarProvider>,
                (children) => <ConfirmProvider>{children}</ConfirmProvider>,
            ]}
        >
            <RouterProvider router={router} fallbackElement={<FullPageSpinner />} />
        </MultiProvider>
    </StrictMode>,
);
