/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as ArticlesArticleIdEditImport } from "./routes/articles/$articleId/edit";
import { Route as ArticlesCreateImport } from "./routes/articles/create";
import { Route as ArticlesRouteImport } from "./routes/articles/route";
import { Route as IndexImport } from "./routes/index";

// Create/Update Routes

const ArticlesRouteRoute = ArticlesRouteImport.update({
    id: "/articles",
    path: "/articles",
    getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => rootRoute,
} as any);

const ArticlesCreateRoute = ArticlesCreateImport.update({
    id: "/create",
    path: "/create",
    getParentRoute: () => ArticlesRouteRoute,
} as any);

const ArticlesArticleIdEditRoute = ArticlesArticleIdEditImport.update({
    id: "/$articleId/edit",
    path: "/$articleId/edit",
    getParentRoute: () => ArticlesRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            id: "/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof IndexImport;
            parentRoute: typeof rootRoute;
        };
        "/articles": {
            id: "/articles";
            path: "/articles";
            fullPath: "/articles";
            preLoaderRoute: typeof ArticlesRouteImport;
            parentRoute: typeof rootRoute;
        };
        "/articles/create": {
            id: "/articles/create";
            path: "/create";
            fullPath: "/articles/create";
            preLoaderRoute: typeof ArticlesCreateImport;
            parentRoute: typeof ArticlesRouteImport;
        };
        "/articles/$articleId/edit": {
            id: "/articles/$articleId/edit";
            path: "/$articleId/edit";
            fullPath: "/articles/$articleId/edit";
            preLoaderRoute: typeof ArticlesArticleIdEditImport;
            parentRoute: typeof ArticlesRouteImport;
        };
    }
}

// Create and export the route tree

interface ArticlesRouteRouteChildren {
    ArticlesCreateRoute: typeof ArticlesCreateRoute;
    ArticlesArticleIdEditRoute: typeof ArticlesArticleIdEditRoute;
}

const ArticlesRouteRouteChildren: ArticlesRouteRouteChildren = {
    ArticlesCreateRoute: ArticlesCreateRoute,
    ArticlesArticleIdEditRoute: ArticlesArticleIdEditRoute,
};

const ArticlesRouteRouteWithChildren = ArticlesRouteRoute._addFileChildren(
    ArticlesRouteRouteChildren,
);

export interface FileRoutesByFullPath {
    "/": typeof IndexRoute;
    "/articles": typeof ArticlesRouteRouteWithChildren;
    "/articles/create": typeof ArticlesCreateRoute;
    "/articles/$articleId/edit": typeof ArticlesArticleIdEditRoute;
}

export interface FileRoutesByTo {
    "/": typeof IndexRoute;
    "/articles": typeof ArticlesRouteRouteWithChildren;
    "/articles/create": typeof ArticlesCreateRoute;
    "/articles/$articleId/edit": typeof ArticlesArticleIdEditRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    "/": typeof IndexRoute;
    "/articles": typeof ArticlesRouteRouteWithChildren;
    "/articles/create": typeof ArticlesCreateRoute;
    "/articles/$articleId/edit": typeof ArticlesArticleIdEditRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths: "/" | "/articles" | "/articles/create" | "/articles/$articleId/edit";
    fileRoutesByTo: FileRoutesByTo;
    to: "/" | "/articles" | "/articles/create" | "/articles/$articleId/edit";
    id: "__root__" | "/" | "/articles" | "/articles/create" | "/articles/$articleId/edit";
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute;
    ArticlesRouteRoute: typeof ArticlesRouteRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    ArticlesRouteRoute: ArticlesRouteRouteWithChildren,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/articles"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/articles": {
      "filePath": "articles/route.tsx",
      "children": [
        "/articles/create",
        "/articles/$articleId/edit"
      ]
    },
    "/articles/create": {
      "filePath": "articles/create.tsx",
      "parent": "/articles"
    },
    "/articles/$articleId/edit": {
      "filePath": "articles/$articleId/edit.tsx",
      "parent": "/articles"
    }
  }
}
ROUTE_MANIFEST_END */
