import "./temporal-polyfill.js";
{%- if features contains "auth0" -%}
import { Auth0Provider } from "@auth0/auth0-react";
import AuthGuard from "@/components/AuthGuard/index.ts";
import useAuthenticatedFetch from "@/hooks/useAuthenticatedFetch";
{%- endif %}
import FullPageSpinner from "@/components/FullPageSpinner/index.ts";
import MultiProvider from "@/components/MultiProvider/index.ts";
import "@fontsource/roboto/300.css";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";
import {
    type QueryOptionsFactory,
    QueryOptionsFactoryProvider,
    createQueryOptionsFactory,
} from "@/queries";
import { routeTree } from "@/routeTree.gen.ts";
import { extendedReplaceEqualDeep } from "@/utils/api.ts";
import { CssBaseline, createTheme } from "@mui/material";
import { ThemeProvider } from "@mui/material/styles";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { RouterProvider, createRouter } from "@tanstack/react-router";
import { SnackbarProvider } from "notistack";
import { type ReactNode, StrictMode } from "react";
import { ConfirmProvider } from "react-confirm-hook";
import { createRoot } from "react-dom/client";

const container = document.getElementById("root");

if (!container) {
    throw new Error("Root element missing");
}

const queryClient = new QueryClient({
    defaultOptions: {
        queries: {
            structuralSharing: extendedReplaceEqualDeep,
            retry: false,
        },
    },
});

const root = createRoot(container);

const router = createRouter({
    routeTree,
    defaultPendingComponent: FullPageSpinner,
    context: {
        queryClient,
        // Injected through React
        qof: undefined as unknown as QueryOptionsFactory,
    },
    defaultPreload: "intent",
    defaultPreloadStaleTime: 0,
});

declare module "@tanstack/react-router" {
    interface Register {
        router: typeof router;
    }
}

const App = (): ReactNode => {
    {%- if features contains "auth0" %}
    const authFetch = useAuthenticatedFetch();
    {%- else %}
    const authFetch = fetch;
    {%- endif %}
    const queryOptionsFactory = createQueryOptionsFactory(authFetch);

    return (
        <QueryOptionsFactoryProvider factory={queryOptionsFactory}>
            <RouterProvider
                router={router}
                context={{ '{{' }}
                    qof: queryOptionsFactory,
                }}
            />
        </QueryOptionsFactoryProvider>
    );
};

const theme = createTheme();

root.render(
    <StrictMode>
        <MultiProvider
            providerCreators={[
                (children) => (
                    <ThemeProvider theme={theme}>
                        <CssBaseline />
                        {children}
                    </ThemeProvider>
                ),
                (children) => (
                    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
                ),
                {%- if features contains "auth0" %}
                (children) => (
                    <Auth0Provider
                        domain={import.meta.env.VITE_APP_AUTH0_DOMAIN}
                        clientId={import.meta.env.VITE_APP_AUTH0_CLIENT_ID}
                        authorizationParams={{ '{{' }}
                            redirect_uri: window.location.origin,
                            audience: import.meta.env.VITE_APP_AUTH0_AUDIENCE,
                        }}
                        onRedirectCallback={(appState) => {
                            void router.navigate({to: appState?.returnTo ?? "/"});
                        }}
                        useRefreshTokens
                        cacheLocation="localstorage"
                    >
                        {children}
                    </Auth0Provider>
                ),
                (children) => <AuthGuard>{children}</AuthGuard>,
                {%- endif %}
                (children) => <SnackbarProvider>{children}</SnackbarProvider>,
                (children) => <ConfirmProvider>{children}</ConfirmProvider>,
            ]}
        >
            <App />
        </MultiProvider>
    </StrictMode>,
);
